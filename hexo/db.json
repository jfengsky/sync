{"meta":{"version":1,"warehouse":"1.0.2"},"models":{"Asset":[{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1}],"Cache":[{"_id":"source/_posts/NSArray和NSMutableArray.md","shasum":"bde98f1ab5191939ac048c89b8d37eb2b3c3e193","modified":1431649364000},{"_id":"source/_posts/NSDictionary和NSMutableDictionary.md","shasum":"07f317fd168f139cd711732fbf4d0bf2bb987c0b","modified":1431694595000},{"_id":"source/_posts/NSNumber.md","shasum":"42b490bc18b88723efc4aa4c78ac50d3dbc5c7a1","modified":1431090535000},{"_id":"source/_posts/NSSet和NSMutableSet.md","shasum":"50bcce548037197a8a7520d6cb84d6aebea09c37","modified":1431782781000},{"_id":"source/_posts/swift-Array.md","shasum":"3cc3a84cfb40faac8f9ecfea7300989643b3bc4d","modified":1441097705000},{"_id":"source/_posts/NSString.md","shasum":"7d15cf0ff2e5b1e1aa227322999cbb8f043947a2","modified":1431608132000},{"_id":"source/_posts/hello-world.md","shasum":"c017e21a794da6759188330b8b25899e1b75f7f7","modified":1428499319000},{"_id":"source/_posts/swift-Optionals-可选值.md","shasum":"c510b64b417c6f835ed778882e649a13068cceb6","modified":1434608415000},{"_id":"source/_posts/swift-Tuples-元祖-类型.md","shasum":"ed89c1ce4c87c2711727e5572b52c68d07975408","modified":1434607037000},{"_id":"source/_posts/swift-UILabel.md","shasum":"d1def960143902059381809c1560825ffac8a14a","modified":1439271110000},{"_id":"source/_posts/可选值-可选类型.md","shasum":"7ea4d1d571468fbb2de0f2e4f9e6c16b323ee49f","modified":1441087067000},{"_id":"source/_posts/新的开始.md","shasum":"d2796fb46b0a0c13b3fce33a722671d12e973ca5","modified":1428503232000},{"_id":"themes/landscape/Gruntfile.js","shasum":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1428463450000},{"_id":"themes/landscape/LICENSE","shasum":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1428463450000},{"_id":"themes/landscape/README.md","shasum":"c7e83cfe8f2c724fc9cac32bd71bb5faf9ceeddb","modified":1428463450000},{"_id":"themes/landscape/_config.yml","shasum":"e1fa116f99b8ab7c23ab75b59932a1a5b9aeb1e3","modified":1428463450000},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","shasum":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1428463450000},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","shasum":"ff9257ca9c06112b8ead94d97754a4d381c46b7f","modified":1428498879000},{"_id":"themes/landscape/layout/_partial/archive.ejs","shasum":"d7de6421497ffaf65e4f5fe4bed71fcea51fde80","modified":1428463450000},{"_id":"themes/landscape/layout/_partial/article.ejs","shasum":"01201725258ad2aaee606cd4dfdebc21b646def1","modified":1428463450000},{"_id":"themes/landscape/layout/_partial/footer.ejs","shasum":"4b19c1080c9e6c2acd922a88ed29d183a3b5bc09","modified":1428463450000},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","shasum":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1428463450000},{"_id":"themes/landscape/layout/_partial/head.ejs","shasum":"da9a4ab32efc44c098f317fe64e2335989929b0e","modified":1428463450000},{"_id":"themes/landscape/layout/_partial/header.ejs","shasum":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1428463450000},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","shasum":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1428463450000},{"_id":"themes/landscape/layout/_partial/post/category.ejs","shasum":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1428463450000},{"_id":"themes/landscape/layout/_partial/post/date.ejs","shasum":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1428463450000},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","shasum":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1428463450000},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","shasum":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1428463450000},{"_id":"themes/landscape/layout/_partial/post/title.ejs","shasum":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1428463450000},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","shasum":"657be071238322f3ead8c97ba0ced4a0a48ffcd0","modified":1428503004000},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","shasum":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1428463450000},{"_id":"themes/landscape/layout/_widget/archive.ejs","shasum":"985fbeb01142b9d526cda8ebc372c1d361d69a6b","modified":1428463450000},{"_id":"themes/landscape/layout/_widget/category.ejs","shasum":"36ab37878129d152e3cbdeb839c08e52af1acd58","modified":1428463450000},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","shasum":"feba7c00fa59ba13bf870b358a499fde4473d335","modified":1428463450000},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","shasum":"34dc8cdd96cdb41dd11cb7513f13714373e5104a","modified":1428463450000},{"_id":"themes/landscape/layout/_widget/tag.ejs","shasum":"b3f321ddda6be2702a286d5b11af9533509506fb","modified":1428463450000},{"_id":"themes/landscape/layout/archive.ejs","shasum":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1428463450000},{"_id":"themes/landscape/layout/category.ejs","shasum":"765426a9c8236828dc34759e604cc2c52292835a","modified":1428463450000},{"_id":"themes/landscape/layout/index.ejs","shasum":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1428463450000},{"_id":"themes/landscape/layout/post.ejs","shasum":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1428463450000},{"_id":"themes/landscape/layout/page.ejs","shasum":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1428463450000},{"_id":"themes/landscape/layout/layout.ejs","shasum":"2fd8a8d208564c30408c7bf568329c59c4130120","modified":1428502908000},{"_id":"themes/landscape/layout/tag.ejs","shasum":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1428463450000},{"_id":"themes/landscape/scripts/fancybox.js","shasum":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1428463450000},{"_id":"themes/landscape/source/css/_extend.styl","shasum":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1428463450000},{"_id":"themes/landscape/source/css/_partial/archive.styl","shasum":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1428463450000},{"_id":"themes/landscape/package.json","shasum":"85358dc34311c6662e841584e206a4679183943f","modified":1428463450000},{"_id":"themes/landscape/source/css/_partial/article.styl","shasum":"5293ac492e73b224530224dbf133f68081a79da2","modified":1428503151000},{"_id":"themes/landscape/source/css/_partial/comment.styl","shasum":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1428463450000},{"_id":"themes/landscape/source/css/_partial/footer.styl","shasum":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1428463450000},{"_id":"themes/landscape/source/css/_partial/header.styl","shasum":"9709f244d333a77365ff3ecdd17a9644e1130eb7","modified":1428503736000},{"_id":"themes/landscape/source/css/_partial/highlight.styl","shasum":"36eefe6332b86b66023a9884b754d305235846b4","modified":1428463450000},{"_id":"themes/landscape/source/css/_partial/mobile.styl","shasum":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1428463450000},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","shasum":"890349df5145abf46ce7712010c89237900b3713","modified":1428463450000},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","shasum":"b7bdc11effa98c6d88850eff75634e2ea9207c14","modified":1428463450000},{"_id":"themes/landscape/source/css/_util/grid.styl","shasum":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1428463450000},{"_id":"themes/landscape/source/css/_util/mixin.styl","shasum":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1428463450000},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","shasum":"bc5487b9a0bfe5f745423331824d3f3637ccd430","modified":1428463450000},{"_id":"themes/landscape/source/css/_variables.styl","shasum":"5e37a6571caf87149af83ac1cc0cdef99f117350","modified":1428463450000},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","shasum":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1428463450000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","shasum":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1428463450000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","shasum":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1428463450000},{"_id":"themes/landscape/source/css/style.styl","shasum":"278d1458b968a151c27b87643191d2d7a8129511","modified":1428463450000},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1428463450000},{"_id":"themes/landscape/source/fancybox/blank.gif","shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1428463450000},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","shasum":"273b123496a42ba45c3416adb027cd99745058b0","modified":1428463450000},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1428463450000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","shasum":"17df19f97628e77be09c352bf27425faea248251","modified":1428463450000},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1428463450000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1428463450000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1428463450000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","shasum":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1428463450000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","shasum":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1428463450000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","shasum":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1428463450000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1428463450000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","shasum":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1428463450000},{"_id":"themes/landscape/source/js/script.js","shasum":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1428463450000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","shasum":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1428463450000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","shasum":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1428463450000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","shasum":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1428463450000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","shasum":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1428463450000},{"_id":"themes/landscape/source/css/images/banner.jpg","shasum":"843d9d47bf2b7b75495db11b3d765efaaae442a9","modified":1428463450000},{"_id":"public/js/script.js","modified":1441097744591,"shasum":"2876e0b19ce557fca38d7c6f49ca55922ab666a1"},{"_id":"public/fancybox/jquery.fancybox.pack.js","modified":1441097744594,"shasum":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e"},{"_id":"public/fancybox/jquery.fancybox.js","modified":1441097744596,"shasum":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed"},{"_id":"public/fancybox/jquery.fancybox.css","modified":1441097744597,"shasum":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6"},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","modified":1441097744598,"shasum":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c"},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","modified":1441097744599,"shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f"},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","modified":1441097744601,"shasum":"294420f9ff20f4e3584d212b0c262a00a96ecdb3"},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","modified":1441097744602,"shasum":"dc3645529a4bf72983a39fa34c1eb9146e082019"},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","modified":1441097744604,"shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8"},{"_id":"public/fancybox/helpers/fancybox_buttons.png","modified":1441097744607,"shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3"},{"_id":"public/fancybox/fancybox_sprite@2x.png","modified":1441097744609,"shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8"},{"_id":"public/fancybox/fancybox_sprite.png","modified":1441097744612,"shasum":"17df19f97628e77be09c352bf27425faea248251"},{"_id":"public/fancybox/fancybox_overlay.png","modified":1441097744614,"shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0"},{"_id":"public/fancybox/fancybox_loading@2x.gif","modified":1441097744618,"shasum":"273b123496a42ba45c3416adb027cd99745058b0"},{"_id":"public/fancybox/fancybox_loading.gif","modified":1441097744621,"shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c"},{"_id":"public/fancybox/blank.gif","modified":1441097744623,"shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a"},{"_id":"public/css/style.css","modified":1441097745110,"shasum":"5bda1550a2e914f0b330f3d27e3a0c761a6ab35a"},{"_id":"public/css/images/banner.jpg","modified":1441097745373,"shasum":"843d9d47bf2b7b75495db11b3d765efaaae442a9"},{"_id":"public/css/fonts/fontawesome-webfont.woff","modified":1441097745377,"shasum":"04c3bf56d87a0828935bd6b4aee859995f321693"},{"_id":"public/css/fonts/fontawesome-webfont.ttf","modified":1441097745380,"shasum":"7f09c97f333917034ad08fa7295e916c9f72fd3f"},{"_id":"public/css/fonts/fontawesome-webfont.svg","modified":1441097745383,"shasum":"46fcc0194d75a0ddac0a038aee41b23456784814"},{"_id":"public/css/fonts/fontawesome-webfont.eot","modified":1441097745385,"shasum":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e"},{"_id":"public/css/fonts/FontAwesome.otf","modified":1441097745388,"shasum":"b5b4f9be85f91f10799e87a083da1d050f842734"},{"_id":"public/2015/09/01/swift-Array/index.html","modified":1441097745455,"shasum":"bde9f34ffda8bf3655c728777fe72bb703ceb37b"},{"_id":"public/2015/09/01/可选值-可选类型/index.html","modified":1441097745463,"shasum":"c4e698d5a67429de3dbc16840829617b7bcc19e5"},{"_id":"public/2015/08/11/swift-UILabel/index.html","modified":1441097745470,"shasum":"cc5ee00d4bc2f9b1a9b6e6324164c3ffee8c715b"},{"_id":"public/2015/06/18/swift-Optionals-可选值/index.html","modified":1441097745476,"shasum":"92ca5d8b8860b625e3039ab22392ef1b01077a0b"},{"_id":"public/2015/06/18/swift-Tuples-元祖-类型/index.html","modified":1441097745480,"shasum":"92b65b929b975f2f4f0c9978caf5bf32b8d6874f"},{"_id":"public/2015/05/17/NSSet和NSMutableSet/index.html","modified":1441097745488,"shasum":"a92dc414c6c56a00b9edbd79b1c93d9eae3ad282"},{"_id":"public/2015/05/15/NSDictionary和NSMutableDictionary/index.html","modified":1441097745496,"shasum":"2fe125380f57332a707328a23103087c4e36f21d"},{"_id":"public/2015/05/15/NSArray和NSMutableArray/index.html","modified":1441097745503,"shasum":"32e4e6f11c896defcc203d6d32ff234049bf2fcb"},{"_id":"public/2015/05/14/NSString/index.html","modified":1441097745509,"shasum":"046a703dc5c2d0438e2d2298675ed91086d3783f"},{"_id":"public/2015/05/08/NSNumber/index.html","modified":1441097745515,"shasum":"2a4889a002503790bc5b4a6da355dfb8cf54056e"},{"_id":"public/2015/04/08/hello-world/index.html","modified":1441097745521,"shasum":"cd804f425acd62da1264b72b282ab4c7c7c841d7"},{"_id":"public/2015/04/08/新的开始/index.html","modified":1441097745527,"shasum":"1a41cd42ed45a441d45e441ec17fc2662c54df4c"},{"_id":"public/categories/日志/index.html","modified":1441097745535,"shasum":"f85508503484d6b5bf6b711ea7f3ef97da44d36e"},{"_id":"public/archives/index.html","modified":1441097745551,"shasum":"72df9a36ab2341a3d92cb53a2d3da87740049e98"},{"_id":"public/archives/page/2/index.html","modified":1441097745556,"shasum":"b96996314276dfa8f6bd7bbf78ecff73f0f9bf49"},{"_id":"public/archives/2015/index.html","modified":1441097745571,"shasum":"8704db0085f7127e26e7e110357eb45f8f0e9d58"},{"_id":"public/archives/2015/page/2/index.html","modified":1441097745575,"shasum":"b82bc4d60367e8dfc3af4e094bb7f3af329ca6d6"},{"_id":"public/archives/2015/04/index.html","modified":1441097745582,"shasum":"e897dfdd5f38fd56c28ed1f95984ecbcb3acf281"},{"_id":"public/archives/2015/05/index.html","modified":1441097745589,"shasum":"2131f63d4b5941c9bd0035f0f5cf3a178cbf25f6"},{"_id":"public/archives/2015/06/index.html","modified":1441097745593,"shasum":"e575a9278d4269cb8aa959d9d3ad19da90227bff"},{"_id":"public/archives/2015/08/index.html","modified":1441097745597,"shasum":"d66dd600a922a9ad14069994462d0ed3d8838d25"},{"_id":"public/archives/2015/09/index.html","modified":1441097745602,"shasum":"620f11e7a1d78128f4f7fc2dcf769bc0556f4c64"},{"_id":"public/index.html","modified":1441097745622,"shasum":"218ea393f19544990d5ff338efb654e07774c811"},{"_id":"public/page/2/index.html","modified":1441097745629,"shasum":"eb863dea799052ea90b2bf1f0baf82ac222c66f9"},{"_id":"public/tags/可选值/index.html","modified":1441097745635,"shasum":"4c902e58efb4d04f4fa6b3f9bd2bae2172ef80d5"},{"_id":"public/tags/UILabel/index.html","modified":1441097745639,"shasum":"22f14972cd397b6a8a1da03512024a6ad7b14888"},{"_id":"public/tags/元祖类型/index.html","modified":1441097745642,"shasum":"62ae83930e79432f9778598d3d61df876a79c9bc"},{"_id":"public/tags/swift-Array/index.html","modified":1441097745646,"shasum":"2c4adc21bfde819e6b83e08164ff2e6424fba1e5"}],"Category":[{"name":"日志","_id":"cie14dz3r000241vmn8o8hvpe"}],"Data":[],"Page":[],"Post":[{"title":"NSArray和NSMutableArray","_content":"###NSArray的一些方法总结\n  \n    // 数组的创建\n    NSArray *array1 = [NSArray arrayWithObject:@\"one\"];\n    NSArray *array2 = [NSArray arrayWithObjects:@\"one\", @\"two\", @\"three\", @\"four\", @\"five\",nil];\n    NSArray *array3 = [NSArray arrayWithArray:array2];\n    NSLog(@\"array1 : %@\", array1);\n    NSLog(@\"array2 : %@\", array2);\n    NSLog(@\"array3 : %@\", array3);\n    NSArray *array4 = [[NSArray alloc] initWithArray:array1];\n    \n    // 获取数组中元素的个数\n    int count = [array2 count];\n    NSLog(@\"%d\", count);   // => 5\n    \n    NSString *string1 = [array2 objectAtIndex:1];\n    NSLog(@\"%@\", string1);  // => two\n    \n    // 追加对象,返回一个新的数组\n    NSArray *array5 = [array2 arrayByAddingObject:@\"six\"];\n    NSLog(@\"array5 : %@\", array5);\n    \n    // 用指定的字符串把数组中的元素连接起来\n    NSString *string2 = [array5 componentsJoinedByString:@\"|\"];\n    NSLog(@\"%@\", string2);\n    \n    // 判断数组中是否存在一个指定的对象\n    BOOL isContain = [array5 containsObject:@\"three\"];\n    NSLog(@\"%d\", isContain);\n    \n    // 根据指定的对象返回索引下标\n    NSInteger index = [array5 indexOfObject:@\"three\"];\n    NSLog(@\"%d\", index);\n    \n    // 返回数组中的最后一个元素\n    NSString *lastObject = [array5 lastObject];\n    NSLog(@\"%@\", lastObject);\n\n\n###NSMutableArray的一些方法总结\n* NSMutableArray继承自NSArray\n\n\n    // 可变数组\n    NSMutableArray *mArray1 = [NSMutableArray array];\n    NSLog(@\"%@\", mArray1);\n    \n    // 创建一个有5个元素的可变数组\n    NSMutableArray *mArray2 = [NSMutableArray arrayWithCapacity:5];\n    NSLog(@\"%@\", mArray2);\n    \n    NSMutableArray *mArray3 = [NSMutableArray arrayWithObjects:@\"one\", @\"two\", nil];\n    NSLog(@\"%@\", mArray3);\n    \n    //添加元素\n    [mArray3 addObject:@\"three\"];\n    NSLog(@\"%@\", mArray3);\n    \n    // 插入元素\n    [mArray3 insertObject:@\"four\" atIndex:3];\n    NSLog(@\"%@\", mArray3);\n    \n    // 移除最后一个元素\n    [mArray3 removeLastObject];\n    NSLog(@\"%@\", mArray3);\n    \n    // 移除指定元素\n    [mArray3 removeObject:@\"two\"];\n    NSLog(@\"%@\", mArray3);\n    \n    // 根据索引下标删除\n    [mArray3 removeObjectAtIndex:1];\n    NSLog(@\"%@\", mArray3);\n    \n    [mArray3 addObject:@\"six\"];\n    [mArray3 addObject:@\"seven\"];\n    [mArray3 addObject:@\"eight\"];\n    \n    // 根据数组删除\n    NSArray *deleteArray = [NSArray arrayWithObjects:@\"seven\",@\"eight\",nil];\n    [mArray3 removeObjectsInArray:deleteArray];\n    NSLog(@\"%@\", mArray3);\n    \n    // 替换指定下标的元素\n    [mArray3 replaceObjectAtIndex:1 withObject:@\"replace\"];\n    NSLog(@\"%@\", mArray3);\n\n###遍历数组\n    \n    for (NSString *tempString in array5) {\n      NSLog(@\"found: %@\", tempString);\n    }\n    \n    // 当不确定数组的元素的类型时,可以选择用id\n    for (id tempString in array5) {\n      NSLog(@\"id found: %@\", tempString);\n    }","source":"_posts/NSArray和NSMutableArray.md","raw":"title: \"NSArray和NSMutableArray\"\n---\n###NSArray的一些方法总结\n  \n    // 数组的创建\n    NSArray *array1 = [NSArray arrayWithObject:@\"one\"];\n    NSArray *array2 = [NSArray arrayWithObjects:@\"one\", @\"two\", @\"three\", @\"four\", @\"five\",nil];\n    NSArray *array3 = [NSArray arrayWithArray:array2];\n    NSLog(@\"array1 : %@\", array1);\n    NSLog(@\"array2 : %@\", array2);\n    NSLog(@\"array3 : %@\", array3);\n    NSArray *array4 = [[NSArray alloc] initWithArray:array1];\n    \n    // 获取数组中元素的个数\n    int count = [array2 count];\n    NSLog(@\"%d\", count);   // => 5\n    \n    NSString *string1 = [array2 objectAtIndex:1];\n    NSLog(@\"%@\", string1);  // => two\n    \n    // 追加对象,返回一个新的数组\n    NSArray *array5 = [array2 arrayByAddingObject:@\"six\"];\n    NSLog(@\"array5 : %@\", array5);\n    \n    // 用指定的字符串把数组中的元素连接起来\n    NSString *string2 = [array5 componentsJoinedByString:@\"|\"];\n    NSLog(@\"%@\", string2);\n    \n    // 判断数组中是否存在一个指定的对象\n    BOOL isContain = [array5 containsObject:@\"three\"];\n    NSLog(@\"%d\", isContain);\n    \n    // 根据指定的对象返回索引下标\n    NSInteger index = [array5 indexOfObject:@\"three\"];\n    NSLog(@\"%d\", index);\n    \n    // 返回数组中的最后一个元素\n    NSString *lastObject = [array5 lastObject];\n    NSLog(@\"%@\", lastObject);\n\n\n###NSMutableArray的一些方法总结\n* NSMutableArray继承自NSArray\n\n\n    // 可变数组\n    NSMutableArray *mArray1 = [NSMutableArray array];\n    NSLog(@\"%@\", mArray1);\n    \n    // 创建一个有5个元素的可变数组\n    NSMutableArray *mArray2 = [NSMutableArray arrayWithCapacity:5];\n    NSLog(@\"%@\", mArray2);\n    \n    NSMutableArray *mArray3 = [NSMutableArray arrayWithObjects:@\"one\", @\"two\", nil];\n    NSLog(@\"%@\", mArray3);\n    \n    //添加元素\n    [mArray3 addObject:@\"three\"];\n    NSLog(@\"%@\", mArray3);\n    \n    // 插入元素\n    [mArray3 insertObject:@\"four\" atIndex:3];\n    NSLog(@\"%@\", mArray3);\n    \n    // 移除最后一个元素\n    [mArray3 removeLastObject];\n    NSLog(@\"%@\", mArray3);\n    \n    // 移除指定元素\n    [mArray3 removeObject:@\"two\"];\n    NSLog(@\"%@\", mArray3);\n    \n    // 根据索引下标删除\n    [mArray3 removeObjectAtIndex:1];\n    NSLog(@\"%@\", mArray3);\n    \n    [mArray3 addObject:@\"six\"];\n    [mArray3 addObject:@\"seven\"];\n    [mArray3 addObject:@\"eight\"];\n    \n    // 根据数组删除\n    NSArray *deleteArray = [NSArray arrayWithObjects:@\"seven\",@\"eight\",nil];\n    [mArray3 removeObjectsInArray:deleteArray];\n    NSLog(@\"%@\", mArray3);\n    \n    // 替换指定下标的元素\n    [mArray3 replaceObjectAtIndex:1 withObject:@\"replace\"];\n    NSLog(@\"%@\", mArray3);\n\n###遍历数组\n    \n    for (NSString *tempString in array5) {\n      NSLog(@\"found: %@\", tempString);\n    }\n    \n    // 当不确定数组的元素的类型时,可以选择用id\n    for (id tempString in array5) {\n      NSLog(@\"id found: %@\", tempString);\n    }","slug":"NSArray和NSMutableArray","published":1,"date":"2015-05-15T00:22:44.000Z","updated":"2015-05-15T00:22:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cie14dz2o000041vm8m1dz1eo"},{"title":"新的开始","date":"2015-04-08T12:14:06.000Z","_content":"\n利用github新搭的blog,以后就用这个了~~\n","source":"_posts/新的开始.md","raw":"title: \"新的开始\"\ndate: 2015-04-08 20:14:06\ncategories: 日志\n---\n\n利用github新搭的blog,以后就用这个了~~\n","slug":"新的开始","published":1,"updated":"2015-04-08T14:27:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cie14dz3p000141vmg0cj0njo"},{"title":"可选值,可选类型","date":"2015-09-01T05:25:27.000Z","_content":"\n    var optValue1: Int?       // 没有值 optValue1为nil\n    var optValue2: Int? = 9   // 有值\n\n    // 对一个可选值的强制解析(注意末尾的感叹号), 如果optValue1没有值,会导致一个运行错误\n    //var sValue: Int = optValue1!\n    //println(sValue)\n\n    // 可选绑定\n    if var sValue = optValue1 {\n      println(sValue)\n    }\n\n    // 隐式解析可选类型,两张状态:有值,没有值(nil)\n    var impOptValue: Int! = 8\n    if impOptValue == 8 {\n      println(impOptValue)\n    }\n    \n    // 不需要强制解析(末尾可不加感叹号)\n    var iValue: Int = impOptValue","source":"_posts/可选值-可选类型.md","raw":"title: \"可选值,可选类型\"\ndate: 2015-09-01 13:25:27\ntags: 可选值\n---\n\n    var optValue1: Int?       // 没有值 optValue1为nil\n    var optValue2: Int? = 9   // 有值\n\n    // 对一个可选值的强制解析(注意末尾的感叹号), 如果optValue1没有值,会导致一个运行错误\n    //var sValue: Int = optValue1!\n    //println(sValue)\n\n    // 可选绑定\n    if var sValue = optValue1 {\n      println(sValue)\n    }\n\n    // 隐式解析可选类型,两张状态:有值,没有值(nil)\n    var impOptValue: Int! = 8\n    if impOptValue == 8 {\n      println(impOptValue)\n    }\n    \n    // 不需要强制解析(末尾可不加感叹号)\n    var iValue: Int = impOptValue","slug":"可选值-可选类型","published":1,"updated":"2015-09-01T05:57:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cie14dz3u000441vmqt52r2lo"},{"title":"swift UILabel","date":"2015-08-11T05:22:59.000Z","_content":"\n        // 设置label位置和大小\n        let textLabel = UILabel(frame:CGRectMake(0, 30, 300, 30));\n\n        // 设置文本\n        textLabel.text = \"测试label\";\n        \n        // 设置背景颜色\n        var redColor = UIColor(red:1.0,green:0,blue:0,alpha:1.0);\n        textLabel.backgroundColor = redColor;\n        \n        // 设置文本对其方式\n        textLabel.textAlignment = NSTextAlignment.Center;\n        \n        // 设置字体颜色\n        textLabel.textColor = UIColor.blueColor();\n        \n        // 设置字体和大小\n        textLabel.font = UIFont(name:\"Thonburi\",size:30);\n        \n        let Color1 = UIColor(red:255,green:255,blue:0,alpha:1);\n        \n        \n        // 把UILabel放入视图\n        self.view.addSubview(textLabel)\n","source":"_posts/swift-UILabel.md","raw":"title: \"swift UILabel\"\ndate: 2015-08-11 13:22:59\ntags: UILabel\n---\n\n        // 设置label位置和大小\n        let textLabel = UILabel(frame:CGRectMake(0, 30, 300, 30));\n\n        // 设置文本\n        textLabel.text = \"测试label\";\n        \n        // 设置背景颜色\n        var redColor = UIColor(red:1.0,green:0,blue:0,alpha:1.0);\n        textLabel.backgroundColor = redColor;\n        \n        // 设置文本对其方式\n        textLabel.textAlignment = NSTextAlignment.Center;\n        \n        // 设置字体颜色\n        textLabel.textColor = UIColor.blueColor();\n        \n        // 设置字体和大小\n        textLabel.font = UIFont(name:\"Thonburi\",size:30);\n        \n        let Color1 = UIColor(red:255,green:255,blue:0,alpha:1);\n        \n        \n        // 把UILabel放入视图\n        self.view.addSubview(textLabel)\n","slug":"swift-UILabel","published":1,"updated":"2015-08-11T05:31:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cie14dz3y000741vmp3ibac97"},{"title":"swift Tuples(元祖)类型","date":"2015-06-18T05:33:12.000Z","_content":"  \n* 将多个不同的值集合成一个数据\n* 可以有任意多个值\n* 不同的值可以是不同的类型\n\n    \n    // 声明一个元祖类型\n    let tuplesTest:(Bool, Int, String) = (false, 404, \"Not Found\");\n\n    // 元祖类型示例\n    let tuples1 = (false, 404, \"Not Found\");\n    // key:value形式\n    let tuples2 = (isSuccess: false, errorCode: 404, errorMessage: \"Not Found\");\n\n    /* \n     * 访问元祖中的数据\n    */\n    // 1.通过定义常量访问\n    let (isSuccess, errorCode, errorMessage) = tuples1;\n    println(isSuccess); // -> false\n    println(errorCode); // -> 404\n    println(errorMessage); // -> \"Not Found\"\n\n    // 2.直接通过下标访问\n    println(tuples1.0); // -> false\n    println(tuples1.1); // -> 404\n    println(tuples1.2); // -> \"Not Found\"\n\n    // 3.通过key来访问\n    println(tuples2.isSuccess); // -> false\n    println(tuples2.errorCode); // -> 404\n    println(tuples2.errorMessage); // -> \"Not Found\"\n\n    // 使用下划线 _ 忽略部分数值\n    let (_, _, errorMessage2) = tuples1;\n    println(errorMessage2); // -> \"Not Found\"","source":"_posts/swift-Tuples-元祖-类型.md","raw":"title: \"swift Tuples(元祖)类型\"\ndate: 2015-06-18 13:33:12\ntags: 元祖类型\n---\n  \n* 将多个不同的值集合成一个数据\n* 可以有任意多个值\n* 不同的值可以是不同的类型\n\n    \n    // 声明一个元祖类型\n    let tuplesTest:(Bool, Int, String) = (false, 404, \"Not Found\");\n\n    // 元祖类型示例\n    let tuples1 = (false, 404, \"Not Found\");\n    // key:value形式\n    let tuples2 = (isSuccess: false, errorCode: 404, errorMessage: \"Not Found\");\n\n    /* \n     * 访问元祖中的数据\n    */\n    // 1.通过定义常量访问\n    let (isSuccess, errorCode, errorMessage) = tuples1;\n    println(isSuccess); // -> false\n    println(errorCode); // -> 404\n    println(errorMessage); // -> \"Not Found\"\n\n    // 2.直接通过下标访问\n    println(tuples1.0); // -> false\n    println(tuples1.1); // -> 404\n    println(tuples1.2); // -> \"Not Found\"\n\n    // 3.通过key来访问\n    println(tuples2.isSuccess); // -> false\n    println(tuples2.errorCode); // -> 404\n    println(tuples2.errorMessage); // -> \"Not Found\"\n\n    // 使用下划线 _ 忽略部分数值\n    let (_, _, errorMessage2) = tuples1;\n    println(errorMessage2); // -> \"Not Found\"","slug":"swift-Tuples-元祖-类型","published":1,"updated":"2015-06-18T05:57:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cie14dz41000a41vmtesutpxj"},{"title":"swift Optionals(可选值)","date":"2015-06-18T06:06:26.000Z","_content":"* 声明后面加? \n* 可选值不能进行强制类型转换,需要解包\n* 可选值后面加!来进行解包\n\n\n    // 声明一个可选值\n    let strA:String? = \"test\";\n    // 可选值解包\n    let strB:String! = strA;\n\n    var a:Int;\n    // println(a); 报错, a没有初始化值\n\n    var age:Int?;\n    println(age); // -> nil\n    age = 12;\n    println(age); // -> Optional(12) 表示可选值12\n\n    if age != nil {\n        println(\"you age is \\(age)\"); // -> you age is Optional(12)\n        \n        // 把可选值转化为可定有值(可选值的解包)\n        println(\"you age is \\(age!)\"); // -> you age is 12\n    }\n\n\n    // String(age); 报错,可选值不能强制进行类型转换\n    String(age!); // ->12","source":"_posts/swift-Optionals-可选值.md","raw":"title: \"swift Optionals(可选值)\"\ndate: 2015-06-18 14:06:26\ntags: 可选值\n---\n* 声明后面加? \n* 可选值不能进行强制类型转换,需要解包\n* 可选值后面加!来进行解包\n\n\n    // 声明一个可选值\n    let strA:String? = \"test\";\n    // 可选值解包\n    let strB:String! = strA;\n\n    var a:Int;\n    // println(a); 报错, a没有初始化值\n\n    var age:Int?;\n    println(age); // -> nil\n    age = 12;\n    println(age); // -> Optional(12) 表示可选值12\n\n    if age != nil {\n        println(\"you age is \\(age)\"); // -> you age is Optional(12)\n        \n        // 把可选值转化为可定有值(可选值的解包)\n        println(\"you age is \\(age!)\"); // -> you age is 12\n    }\n\n\n    // String(age); 报错,可选值不能强制进行类型转换\n    String(age!); // ->12","slug":"swift-Optionals-可选值","published":1,"updated":"2015-06-18T06:20:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cie14dz43000d41vmvw5l42i4"},{"title":"swift Array","date":"2015-09-01T08:48:11.000Z","_content":"    \n    // 定义一个数组\n    var array1 = [2, 3, 4, 5]\n\n    var array2: Array = [2, 3, 4, 5]\n\n    var array3: Array<Int> = [2, 3, 4, 5]\n\n    // 推荐这种写法\n    var array4: [Int] = [2, 3, 4, 5]\n\n    // 数组元素可以有不同的类型\n    var array5: Array<Any> = [1, \"string\", false, 2.3]\n    var array6 = [1, \"string\", false, 2.3]\n\n    // 判断数组是否为空\n    array1.isEmpty //-> false\n\n    // 数组元素的个数\n    array1.count // -> 4\n\n    array1[3]\n\n    // 向数组末尾加入元素\n    array5.append(\"d\")\n    array5 += [6]\n\n    // 向数组任意位置插入元素\n    array1.insert(1, atIndex: 0)\n\n    // 修改数组的元素的值\n    array1[2] = 9\n\n    // 删除数组某个元素\n    array1.removeLast()\n    array1.removeAtIndex(0)\n    // array1.removeAll(是否保持容量)\n\n    // Range\n    var range: Range<Int> = 0..<3                     // -> 1..<3\n    var range2: Range<Int> = Range(start: 0, end: 3)  // -> 1..<3\n    var range3 = 0...2                                // -> 1..<3\n\n    // 数组的批量操作\n    array4[0...2] //批量访问\n    array4[0...1] = [9,9,9,9] // 可以修改任意个数\n    // array4.replaceRange(Range(start: 0, end: 2), with: [9,9,9,9]) // 这个和上面是等价的\n    // array4.replaceRange(Range(0..<2, with: [9,9,9,9])\n    \n    //数组的遍历\n    for elem in array4 {\n      println(elem)\n    }\n\n    // 枚举方法遍历\n    for (index, value) in enumerate(array4) {\n      println(index)\n      println(value)\n    }\n","source":"_posts/swift-Array.md","raw":"title: \"swift Array\"\ndate: 2015-09-01 16:48:11\ntags: swift Array\n---\n    \n    // 定义一个数组\n    var array1 = [2, 3, 4, 5]\n\n    var array2: Array = [2, 3, 4, 5]\n\n    var array3: Array<Int> = [2, 3, 4, 5]\n\n    // 推荐这种写法\n    var array4: [Int] = [2, 3, 4, 5]\n\n    // 数组元素可以有不同的类型\n    var array5: Array<Any> = [1, \"string\", false, 2.3]\n    var array6 = [1, \"string\", false, 2.3]\n\n    // 判断数组是否为空\n    array1.isEmpty //-> false\n\n    // 数组元素的个数\n    array1.count // -> 4\n\n    array1[3]\n\n    // 向数组末尾加入元素\n    array5.append(\"d\")\n    array5 += [6]\n\n    // 向数组任意位置插入元素\n    array1.insert(1, atIndex: 0)\n\n    // 修改数组的元素的值\n    array1[2] = 9\n\n    // 删除数组某个元素\n    array1.removeLast()\n    array1.removeAtIndex(0)\n    // array1.removeAll(是否保持容量)\n\n    // Range\n    var range: Range<Int> = 0..<3                     // -> 1..<3\n    var range2: Range<Int> = Range(start: 0, end: 3)  // -> 1..<3\n    var range3 = 0...2                                // -> 1..<3\n\n    // 数组的批量操作\n    array4[0...2] //批量访问\n    array4[0...1] = [9,9,9,9] // 可以修改任意个数\n    // array4.replaceRange(Range(start: 0, end: 2), with: [9,9,9,9]) // 这个和上面是等价的\n    // array4.replaceRange(Range(0..<2, with: [9,9,9,9])\n    \n    //数组的遍历\n    for elem in array4 {\n      println(elem)\n    }\n\n    // 枚举方法遍历\n    for (index, value) in enumerate(array4) {\n      println(index)\n      println(value)\n    }\n","slug":"swift-Array","published":1,"updated":"2015-09-01T08:55:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cie14dz46000f41vm48mivbb2"},{"title":"Hello hexo","_content":"Welcome to [Hexo](http://hexo.io/)! This is your very first post. Check [documentation](http://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](http://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](http://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](http://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](http://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](http://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"title: Hello hexo\n---\nWelcome to [Hexo](http://hexo.io/)! This is your very first post. Check [documentation](http://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](http://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](http://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](http://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](http://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](http://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2015-04-08T13:21:59.000Z","updated":"2015-04-08T13:21:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cie14dz48000i41vmk2byu9nv"},{"title":"NSString","_content":"\n###NSString对象的一些方法总结\n* NSString对象一旦被创建就不可以修改.如果需要一个可以更改的字符串对象,需要创建NSMutableString实例\n\n\n    /*\n     *  创建字符串\n     */\n    // 创建一个字符串常量\n    NSString *string1 = @\"这是一个字符串常量\";\n\n    // 创建一个空的字符串\n    NSString *string2 = [[NSString alloc] init];  // 实例方法创建\n    NSString *string3 = [NSString string];        // 类方法创建\n\n    // 快速创建一个字符串\n    NSString *string4 = [[NSString alloc] initWithString: @\"abc\"];   // 实例方法创建\n    NSString *string5 = [NSString stringWithString:@\"xyz\"];          // 类方法创建\n\n    // 创建一个格式化的字符串\n    NSString *string6 = [[NSString alloc] initWithFormat:@\"整数:%d\", 10];  // 实例方法创建\n    NSString *string7 = [NSString stringWithFormat:@\"浮点数:%f\", 10.8];      // 类方法创建\n\n    /*\n     *  比较字符串是否相等\n     */\n    if ([string4 isEqualToString:string5]) {\n        NSLog(@\"same\");\n    } else {\n        NSLog(@\"different\");\n    }\n\n    /*\n     *  测试字符串是否为同一对象\n     */\n    if (string4 == string5) {\n        NSLog(@\"same pointer\");\n    } else {\n        NSLog(@\"different pointer\");\n    }\n\n    /*\n     *  比较字符串的大小\n     *  caseInsensitiveCompare 升序\n     *  localizedCompare\n     */\n    NSComparisonResult result = [string4 caseInsensitiveCompare:string5];\n\n    /**\n     *  求字符串的长度\n     */\n    NSLog(@\"%d\", [string4 length]);\n\n    /**\n     *  字符串的转换\n     */\n    [string4 uppercaseString];   // 字母都大写\n    [string4 lowercaseString];   // 字母都小写\n    [string4 capitalizedString]; // 首字幕大写\n\n    /**\n     *  字符串转化为基本数据类型\n     */\n    float floatNumber = [string7 floatValue];  // 转化为浮点数\n\n    /**\n     * 把字符串转化为数组\n     */\n    NSString *string8 = @\"abc def xyz\";\n    NSArray *array1 = [string8 componentsSeparatedByString:@\" \"];\n    NSLog(@\"%@\", array1);\n\n    /**\n     * 字符串的截取\n     */\n    NSString *string9 = @\"abcde\";\n    NSString *subString1 = [string9 substringToIndex:3];   // 截取到哪个位置 => abc\n    NSString *subString2 = [string9 substringFromIndex:3]; // 从哪个位置开始截取 => de\n    NSRange range;\n    range.location = 1;\n    range.length = 3;\n    NSString *subString3 = [string9 substringWithRange:range];\n    NSLog(@\"%@\", subString3);\n\n    /**\n     * 字符串的拼接\n     */\n    NSString *string16 = @\"abc\";\n    NSString *string17 = @\"xyz\";\n    \n    NSString *addString1 = [[NSString alloc] initWithFormat:@\"%@%@\", string16, string17];\n    NSString *addString2 = [string16 stringByAppendingFormat:@\"%@\", string17];\n    NSString *addString3 = [string16 stringByAppendingString:string17];\n    NSLog(@\"%@\", addString1);\n    NSLog(@\"%@\", addString2);\n    NSLog(@\"%@\", addString3);\n        \n    /**\n     * 查找字符串\n     */\n    NSString *link = @\"abcdefgtargetxyz\";\n    NSRange range1 = [link rangeOfString:@\"target\"];\n    NSLog(@\"%@\", NSStringFromRange(range1));\n    if(range1.location != NSNotFound) {\n        NSLog(@\"founded\");\n    }\n    \n    /**\n     * 可变字符串\n     */\n    \n    // 插入\n    NSMutableString *mutableString1 = [[NSMutableString alloc] initWithFormat:@\"abc\"];\n    [mutableString1 insertString:@\"..xyz..\" atIndex:1];\n    NSLog(@\"%@\", mutableString1);\n    \n    // 替换\n    [mutableString1 replaceCharactersInRange:NSMakeRange(1, 2) withString:@\"efg\"];\n    NSLog(@\"%@\", mutableString1);\n    \n    // 删除\n    [mutableString1 deleteCharactersInRange:NSMakeRange(0, 3)];\n    NSLog(@\"%@\", mutableString1);\n","source":"_posts/NSString.md","raw":"title: \"NSString\"\n---\n\n###NSString对象的一些方法总结\n* NSString对象一旦被创建就不可以修改.如果需要一个可以更改的字符串对象,需要创建NSMutableString实例\n\n\n    /*\n     *  创建字符串\n     */\n    // 创建一个字符串常量\n    NSString *string1 = @\"这是一个字符串常量\";\n\n    // 创建一个空的字符串\n    NSString *string2 = [[NSString alloc] init];  // 实例方法创建\n    NSString *string3 = [NSString string];        // 类方法创建\n\n    // 快速创建一个字符串\n    NSString *string4 = [[NSString alloc] initWithString: @\"abc\"];   // 实例方法创建\n    NSString *string5 = [NSString stringWithString:@\"xyz\"];          // 类方法创建\n\n    // 创建一个格式化的字符串\n    NSString *string6 = [[NSString alloc] initWithFormat:@\"整数:%d\", 10];  // 实例方法创建\n    NSString *string7 = [NSString stringWithFormat:@\"浮点数:%f\", 10.8];      // 类方法创建\n\n    /*\n     *  比较字符串是否相等\n     */\n    if ([string4 isEqualToString:string5]) {\n        NSLog(@\"same\");\n    } else {\n        NSLog(@\"different\");\n    }\n\n    /*\n     *  测试字符串是否为同一对象\n     */\n    if (string4 == string5) {\n        NSLog(@\"same pointer\");\n    } else {\n        NSLog(@\"different pointer\");\n    }\n\n    /*\n     *  比较字符串的大小\n     *  caseInsensitiveCompare 升序\n     *  localizedCompare\n     */\n    NSComparisonResult result = [string4 caseInsensitiveCompare:string5];\n\n    /**\n     *  求字符串的长度\n     */\n    NSLog(@\"%d\", [string4 length]);\n\n    /**\n     *  字符串的转换\n     */\n    [string4 uppercaseString];   // 字母都大写\n    [string4 lowercaseString];   // 字母都小写\n    [string4 capitalizedString]; // 首字幕大写\n\n    /**\n     *  字符串转化为基本数据类型\n     */\n    float floatNumber = [string7 floatValue];  // 转化为浮点数\n\n    /**\n     * 把字符串转化为数组\n     */\n    NSString *string8 = @\"abc def xyz\";\n    NSArray *array1 = [string8 componentsSeparatedByString:@\" \"];\n    NSLog(@\"%@\", array1);\n\n    /**\n     * 字符串的截取\n     */\n    NSString *string9 = @\"abcde\";\n    NSString *subString1 = [string9 substringToIndex:3];   // 截取到哪个位置 => abc\n    NSString *subString2 = [string9 substringFromIndex:3]; // 从哪个位置开始截取 => de\n    NSRange range;\n    range.location = 1;\n    range.length = 3;\n    NSString *subString3 = [string9 substringWithRange:range];\n    NSLog(@\"%@\", subString3);\n\n    /**\n     * 字符串的拼接\n     */\n    NSString *string16 = @\"abc\";\n    NSString *string17 = @\"xyz\";\n    \n    NSString *addString1 = [[NSString alloc] initWithFormat:@\"%@%@\", string16, string17];\n    NSString *addString2 = [string16 stringByAppendingFormat:@\"%@\", string17];\n    NSString *addString3 = [string16 stringByAppendingString:string17];\n    NSLog(@\"%@\", addString1);\n    NSLog(@\"%@\", addString2);\n    NSLog(@\"%@\", addString3);\n        \n    /**\n     * 查找字符串\n     */\n    NSString *link = @\"abcdefgtargetxyz\";\n    NSRange range1 = [link rangeOfString:@\"target\"];\n    NSLog(@\"%@\", NSStringFromRange(range1));\n    if(range1.location != NSNotFound) {\n        NSLog(@\"founded\");\n    }\n    \n    /**\n     * 可变字符串\n     */\n    \n    // 插入\n    NSMutableString *mutableString1 = [[NSMutableString alloc] initWithFormat:@\"abc\"];\n    [mutableString1 insertString:@\"..xyz..\" atIndex:1];\n    NSLog(@\"%@\", mutableString1);\n    \n    // 替换\n    [mutableString1 replaceCharactersInRange:NSMakeRange(1, 2) withString:@\"efg\"];\n    NSLog(@\"%@\", mutableString1);\n    \n    // 删除\n    [mutableString1 deleteCharactersInRange:NSMakeRange(0, 3)];\n    NSLog(@\"%@\", mutableString1);\n","slug":"NSString","published":1,"date":"2015-05-14T12:55:32.000Z","updated":"2015-05-14T12:55:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cie14dz4a000j41vmll8bdeq9"},{"title":"NSSet和NSMutableSet","_content":"\n###NSSet\n  \n    // 集合的创建\n    NSSet *set1 = [NSSet setWithObjects:@\"1\",@\"2\", nil];\n    NSSet *set2 = [[NSSet alloc] initWithObjects:@\"2\",@\"3\",@\"4\",@\"5\", nil];\n    NSArray *array1 = [NSArray arrayWithObjects:@\"7\",@\"8\", @\"10\",@\"11\", nil];\n    NSSet *set3 = [NSSet setWithArray:array1];\n    NSSet *set4 = [NSSet setWithSet:set2];\n    NSLog(@\"set1: %@\", set1);\n    NSLog(@\"set2: %@\", set2);\n    NSLog(@\"set3: %@\", set3);\n    NSLog(@\"set4: %@\", set4);\n    \n    // 集合中元素的个数\n    int count = [set2 count];\n    NSLog(@\"%d\", count);\n    \n    // 将集合返回一个数组\n    NSArray *objects = [set1 allObjects];\n    NSLog(@\"objects : %@\", objects);\n    \n    // 获取集合中任意一个对象\n    id object = [set2 anyObject];\n    NSLog(@\"%@\", object);\n    \n    // 集合是否包含某个元素\n    BOOL isContain = [set2 containsObject:@\"3\"];\n    NSLog(@\"%d\", isContain);\n    \n    // 集合间是否存在交集\n    BOOL isIntersect = [set1 intersectsSet:set2];\n    NSLog(@\"%d\", isIntersect);\n    \n    // 集合是否另一个集合匹配\n    BOOL isEqual = [set1 isEqualToSet:set2];\n    NSLog(@\"%d\", isEqual);\n    \n    // 集合是否是另一个集合的子集\n    BOOL isSub = [set1 isSubsetOfSet:set2];\n    NSLog(@\"%d\", isSub);\n    \n    // 追加新的集合\n    NSSet *set5 = [NSSet setWithObjects:@\"one\", nil];\n    NSSet *appSet1 = [set5 setByAddingObject:@\"two\"];\n    NSLog(@\"%@\", appSet1);\n    \n    NSSet *appSet2 = [set5 setByAddingObjectsFromSet: set1];\n    NSLog(@\"%@\", appSet2);\n    \n    NSSet *appSet3 = [set5 setByAddingObjectsFromArray:array1];\n    NSLog(@\"%@\", appSet3);\n\n###NSMutableSet\n\n    NSMutableSet *set6 = [NSMutableSet setWithObjects:@\"1\", @\"2\", @\"a\" , nil];\n    NSMutableSet *set7 = [NSMutableSet setWithObjects:@\"1\", @\"3\", @\"a\" , nil];\n    \n    // 减去相同的元素\n     [set6 minusSet:set7];\n    \n    // 取得两个集合的交集\n     [set6 intersectSet:set7];\n    \n    // 两个集合的并集\n     [set6 unionSet:set7];\n    \n    // 删除指定的对象\n    [set6 removeObject:@\"2\"];\n    \n    NSLog(@\"set6: %@\", set6);","source":"_posts/NSSet和NSMutableSet.md","raw":"title: \"NSSet和NSMutableSet\"\n---\n\n###NSSet\n  \n    // 集合的创建\n    NSSet *set1 = [NSSet setWithObjects:@\"1\",@\"2\", nil];\n    NSSet *set2 = [[NSSet alloc] initWithObjects:@\"2\",@\"3\",@\"4\",@\"5\", nil];\n    NSArray *array1 = [NSArray arrayWithObjects:@\"7\",@\"8\", @\"10\",@\"11\", nil];\n    NSSet *set3 = [NSSet setWithArray:array1];\n    NSSet *set4 = [NSSet setWithSet:set2];\n    NSLog(@\"set1: %@\", set1);\n    NSLog(@\"set2: %@\", set2);\n    NSLog(@\"set3: %@\", set3);\n    NSLog(@\"set4: %@\", set4);\n    \n    // 集合中元素的个数\n    int count = [set2 count];\n    NSLog(@\"%d\", count);\n    \n    // 将集合返回一个数组\n    NSArray *objects = [set1 allObjects];\n    NSLog(@\"objects : %@\", objects);\n    \n    // 获取集合中任意一个对象\n    id object = [set2 anyObject];\n    NSLog(@\"%@\", object);\n    \n    // 集合是否包含某个元素\n    BOOL isContain = [set2 containsObject:@\"3\"];\n    NSLog(@\"%d\", isContain);\n    \n    // 集合间是否存在交集\n    BOOL isIntersect = [set1 intersectsSet:set2];\n    NSLog(@\"%d\", isIntersect);\n    \n    // 集合是否另一个集合匹配\n    BOOL isEqual = [set1 isEqualToSet:set2];\n    NSLog(@\"%d\", isEqual);\n    \n    // 集合是否是另一个集合的子集\n    BOOL isSub = [set1 isSubsetOfSet:set2];\n    NSLog(@\"%d\", isSub);\n    \n    // 追加新的集合\n    NSSet *set5 = [NSSet setWithObjects:@\"one\", nil];\n    NSSet *appSet1 = [set5 setByAddingObject:@\"two\"];\n    NSLog(@\"%@\", appSet1);\n    \n    NSSet *appSet2 = [set5 setByAddingObjectsFromSet: set1];\n    NSLog(@\"%@\", appSet2);\n    \n    NSSet *appSet3 = [set5 setByAddingObjectsFromArray:array1];\n    NSLog(@\"%@\", appSet3);\n\n###NSMutableSet\n\n    NSMutableSet *set6 = [NSMutableSet setWithObjects:@\"1\", @\"2\", @\"a\" , nil];\n    NSMutableSet *set7 = [NSMutableSet setWithObjects:@\"1\", @\"3\", @\"a\" , nil];\n    \n    // 减去相同的元素\n     [set6 minusSet:set7];\n    \n    // 取得两个集合的交集\n     [set6 intersectSet:set7];\n    \n    // 两个集合的并集\n     [set6 unionSet:set7];\n    \n    // 删除指定的对象\n    [set6 removeObject:@\"2\"];\n    \n    NSLog(@\"set6: %@\", set6);","slug":"NSSet和NSMutableSet","published":1,"date":"2015-05-17T11:41:56.000Z","updated":"2015-05-16T13:26:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cie14dz4d000k41vmymle830w"},{"title":"NSNumber","_content":"\n###NSNumber对象的一些方法总结\n\n    // 创建一个基本的NSNumber对象\n    NSNumber *numberInt = [NSNumber numberWithInt: 10];   // 创建和初始化类方法\n    NSNumber *numberFloat = [[NSNumber alloc] initWithFloat: 10.8]; // 初始化实例方法\n    \n    // 还原成基本数据类型\n    int basicInt = [numberInt intValue];\n    float baseFloat = [numberFloat floatValue];\n\n    // 比较两个对象是否相等\n    if ([numberInt isEqualToNumber: numberFloat] == YES) {\n      NSLog(@\"相等\");\n    } else {\n      NSLog(@\"不等\");\n    }\n\n    // 比较两个对象的大小\n    if ( [numberInt compare:numberFloat] == NSOrderedAscending) {  \n      NSLog(@\"左边的数字小\");  \n    } else {  \n      NSLog(@\"左边的数字大\");  \n    }","source":"_posts/NSNumber.md","raw":"title: \"NSNumber\"\n---\n\n###NSNumber对象的一些方法总结\n\n    // 创建一个基本的NSNumber对象\n    NSNumber *numberInt = [NSNumber numberWithInt: 10];   // 创建和初始化类方法\n    NSNumber *numberFloat = [[NSNumber alloc] initWithFloat: 10.8]; // 初始化实例方法\n    \n    // 还原成基本数据类型\n    int basicInt = [numberInt intValue];\n    float baseFloat = [numberFloat floatValue];\n\n    // 比较两个对象是否相等\n    if ([numberInt isEqualToNumber: numberFloat] == YES) {\n      NSLog(@\"相等\");\n    } else {\n      NSLog(@\"不等\");\n    }\n\n    // 比较两个对象的大小\n    if ( [numberInt compare:numberFloat] == NSOrderedAscending) {  \n      NSLog(@\"左边的数字小\");  \n    } else {  \n      NSLog(@\"左边的数字大\");  \n    }","slug":"NSNumber","published":1,"date":"2015-05-08T13:08:55.000Z","updated":"2015-05-08T13:08:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cie14dz4g000l41vmbout44eo"},{"title":"NSDictionary和NSMutableDictionary","_content":"###NSDictionary的一些方法总结\n    \n    NSDictionary *dic1 = [NSDictionary dictionaryWithObject:@\"value\" forKey:@\"k1\"];\n    NSDictionary *dic2 = [NSDictionary dictionaryWithObjectsAndKeys:@\"v1\",@\"k1\",@\"v2\",@\"k2\",@\"v3\",@\"k3\", nil];\n    NSDictionary *dic3 = [NSDictionary dictionaryWithDictionary:dic1];\n    NSLog(@\"%@\", dic1);\n    NSLog(@\"%@\", dic2);\n    NSLog(@\"%@\", dic3);\n    \n    // 获取字典的数量\n    int count = [dic2 count];\n    NSLog(@\"count : %d\", count);\n    \n    // 获取字典的value\n    NSString *string1 = [dic2 objectForKey:@\"k3\"];\n    NSLog(@\"value: %@\", string1);\n    \n    // 获取字典的所有key\n    NSArray *keyArray = [dic2 allKeys];\n    NSLog(@\"%@\", keyArray);\n    \n    // 获取字典的所有value\n    NSArray *valueArray = [dic2 allValues];\n    NSLog(@\"%@\", valueArray);\n\n\n\n###NSMutableDictionary的一些方法总结\n* NSMutableDictionary继承自NSDictionary\n\n\n    NSMutableDictionary *mutableDic1 = [[NSMutableDictionary alloc] initWithObjectsAndKeys:@\"v1\",@\"k1\",@\"v2\",@\"k2\",@\"v3\",@\"k3\",@\"v4\",@\"k4\", nil];\n    NSLog(@\"mutableDict1: %@\", mutableDic1);\n    \n    // 可变字典加入元素\n    NSDictionary *dic4 = [NSDictionary dictionaryWithObject:@\"v5\" forKey:@\"k5\"];\n    [mutableDic1 addEntriesFromDictionary:dic4];\n    NSLog(@\"mutableDict1: %@\", mutableDic1);\n    \n    // 可变字典中直接添加新的\n    [mutableDic1 setValue:@\"object\" forKey:@\"key\"];\n    NSLog(@\"mutableDict1: %@\", mutableDic1);\n    \n    // 创建一个空的可变字典\n    NSMutableDictionary *mutableDic2 = [NSMutableDictionary dictionary];\n    [mutableDic2 setDictionary:mutableDic1];\n    NSLog(@\"mutableDict2: %@\", mutableDic2);\n    \n    // 根据指定的key\n    [mutableDic2 removeObjectForKey:@\"k4\"];\n    NSLog(@\"mutableDict2: %@\", mutableDic2);\n    \n    // 删除一组key\n    NSArray *keys = [NSArray arrayWithObjects:@\"k1\",@\"k2\", nil];\n    [mutableDic2 removeObjectsForKeys:keys];\n    NSLog(@\"mutableDict2: %@\", mutableDic2);\n\n    // 删除所有的内容\n    [mutableDic2 removeAllObjects];\n\n### 遍历字典\n    \n    for (int index = 0; index < [mutableDic1 count]; index++) {\n      NSString *object = [mutableDic1 objectForKey:[[mutableDic1 allKeys] objectAtIndex:index]];\n      NSLog(@\"object: %@\", object);\n    }\n    \n    // 快速枚举\n    for (id key in mutableDic1) {\n      NSString *object = [mutableDic1 objectForKey:key];\n      NSLog(@\"object: %@\", object);\n    }\n    \n    // 使用枚举类型\n    NSEnumerator *enumerator = [mutableDic1 keyEnumerator];\n    id key = [enumerator nextObject];\n    while (key = [enumerator nextObject]) {\n      id object = [mutableDic1 objectForKey:key];\n      NSLog(@\"%@\", object);   \n    }","source":"_posts/NSDictionary和NSMutableDictionary.md","raw":"title: \"NSDictionary和NSMutableDictionary\"\n---\n###NSDictionary的一些方法总结\n    \n    NSDictionary *dic1 = [NSDictionary dictionaryWithObject:@\"value\" forKey:@\"k1\"];\n    NSDictionary *dic2 = [NSDictionary dictionaryWithObjectsAndKeys:@\"v1\",@\"k1\",@\"v2\",@\"k2\",@\"v3\",@\"k3\", nil];\n    NSDictionary *dic3 = [NSDictionary dictionaryWithDictionary:dic1];\n    NSLog(@\"%@\", dic1);\n    NSLog(@\"%@\", dic2);\n    NSLog(@\"%@\", dic3);\n    \n    // 获取字典的数量\n    int count = [dic2 count];\n    NSLog(@\"count : %d\", count);\n    \n    // 获取字典的value\n    NSString *string1 = [dic2 objectForKey:@\"k3\"];\n    NSLog(@\"value: %@\", string1);\n    \n    // 获取字典的所有key\n    NSArray *keyArray = [dic2 allKeys];\n    NSLog(@\"%@\", keyArray);\n    \n    // 获取字典的所有value\n    NSArray *valueArray = [dic2 allValues];\n    NSLog(@\"%@\", valueArray);\n\n\n\n###NSMutableDictionary的一些方法总结\n* NSMutableDictionary继承自NSDictionary\n\n\n    NSMutableDictionary *mutableDic1 = [[NSMutableDictionary alloc] initWithObjectsAndKeys:@\"v1\",@\"k1\",@\"v2\",@\"k2\",@\"v3\",@\"k3\",@\"v4\",@\"k4\", nil];\n    NSLog(@\"mutableDict1: %@\", mutableDic1);\n    \n    // 可变字典加入元素\n    NSDictionary *dic4 = [NSDictionary dictionaryWithObject:@\"v5\" forKey:@\"k5\"];\n    [mutableDic1 addEntriesFromDictionary:dic4];\n    NSLog(@\"mutableDict1: %@\", mutableDic1);\n    \n    // 可变字典中直接添加新的\n    [mutableDic1 setValue:@\"object\" forKey:@\"key\"];\n    NSLog(@\"mutableDict1: %@\", mutableDic1);\n    \n    // 创建一个空的可变字典\n    NSMutableDictionary *mutableDic2 = [NSMutableDictionary dictionary];\n    [mutableDic2 setDictionary:mutableDic1];\n    NSLog(@\"mutableDict2: %@\", mutableDic2);\n    \n    // 根据指定的key\n    [mutableDic2 removeObjectForKey:@\"k4\"];\n    NSLog(@\"mutableDict2: %@\", mutableDic2);\n    \n    // 删除一组key\n    NSArray *keys = [NSArray arrayWithObjects:@\"k1\",@\"k2\", nil];\n    [mutableDic2 removeObjectsForKeys:keys];\n    NSLog(@\"mutableDict2: %@\", mutableDic2);\n\n    // 删除所有的内容\n    [mutableDic2 removeAllObjects];\n\n### 遍历字典\n    \n    for (int index = 0; index < [mutableDic1 count]; index++) {\n      NSString *object = [mutableDic1 objectForKey:[[mutableDic1 allKeys] objectAtIndex:index]];\n      NSLog(@\"object: %@\", object);\n    }\n    \n    // 快速枚举\n    for (id key in mutableDic1) {\n      NSString *object = [mutableDic1 objectForKey:key];\n      NSLog(@\"object: %@\", object);\n    }\n    \n    // 使用枚举类型\n    NSEnumerator *enumerator = [mutableDic1 keyEnumerator];\n    id key = [enumerator nextObject];\n    while (key = [enumerator nextObject]) {\n      id object = [mutableDic1 objectForKey:key];\n      NSLog(@\"%@\", object);   \n    }","slug":"NSDictionary和NSMutableDictionary","published":1,"date":"2015-05-15T12:56:35.000Z","updated":"2015-05-15T12:56:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cie14dz4i000m41vmr9lzpc71"}],"PostAsset":[],"PostCategory":[{"post_id":"cie14dz3p000141vmg0cj0njo","category_id":"cie14dz3r000241vmn8o8hvpe","_id":"cie14dz3t000341vmfqpi2nsy"}],"PostTag":[{"post_id":"cie14dz3u000441vmqt52r2lo","tag_id":"cie14dz3w000541vmyt09e220","_id":"cie14dz3w000641vm59bg2wc2"},{"post_id":"cie14dz3y000741vmp3ibac97","tag_id":"cie14dz3z000841vmtsgpi6uv","_id":"cie14dz40000941vmxqfwem7g"},{"post_id":"cie14dz41000a41vmtesutpxj","tag_id":"cie14dz42000b41vmpimh61k2","_id":"cie14dz42000c41vmpaauo3g1"},{"post_id":"cie14dz43000d41vmvw5l42i4","tag_id":"cie14dz3w000541vmyt09e220","_id":"cie14dz44000e41vmct82kx6i"},{"post_id":"cie14dz46000f41vm48mivbb2","tag_id":"cie14dz46000g41vmcvm76j03","_id":"cie14dz47000h41vmggsvtod7"}],"Tag":[{"name":"可选值","_id":"cie14dz3w000541vmyt09e220"},{"name":"UILabel","_id":"cie14dz3z000841vmtsgpi6uv"},{"name":"元祖类型","_id":"cie14dz42000b41vmpimh61k2"},{"name":"swift Array","_id":"cie14dz46000g41vmcvm76j03"}]}}